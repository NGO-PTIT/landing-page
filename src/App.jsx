import { useState } from 'react'
import { createOrder } from './api/orders'
import { SHOP, PRODUCTS, CATEGORIES, currencyVND } from './data.jsx'
import './App.css'





function App() {
  const [selectedProduct, setSelectedProduct] = useState(null)
  const [quantity, setQuantity] = useState(1)
  const [customer, setCustomer] = useState({ name: '', phone: '', email: '', address: '' })
  const [step, setStep] = useState('products')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [orderId, setOrderId] = useState('')
  const [submitError, setSubmitError] = useState('')
  const [category, setCategory] = useState('T·∫•t c·∫£')
  const [page, setPage] = useState(1)
  const pageSize = 8
  const [mediaIndex, setMediaIndex] = useState(0)

  const subtotal = selectedProduct ? selectedProduct.price * quantity : 0
  const productsToShow = PRODUCTS.filter(p => category === 'T·∫•t c·∫£' || p.category === category)
  const totalPages = Math.max(1, Math.ceil(productsToShow.length / pageSize))
  const currentPage = Math.min(page, totalPages)
  const pagedProducts = productsToShow.slice((currentPage - 1) * pageSize, currentPage * pageSize)

  function openForm(product) {
    setSelectedProduct(product)
    setQuantity(1)
    setCustomer({ name: '', phone: '', email: '', address: '' })
    setStep('form')
  }

  function openDetail(product) {
    setSelectedProduct(product)
    setMediaIndex(0)
    setStep('detail')
  }

  async function handleSubmit(e) {
    e.preventDefault()
    setSubmitError('')
    setIsSubmitting(true)
    try {
      const order = {
        items: [
          {
            productId: selectedProduct.id,
            productName: selectedProduct.name,
            unitPrice: selectedProduct.price,
            quantity,
          },
        ],
        total: subtotal,
        contact: customer,
      }
      const ref = await createOrder(order)
      setOrderId(ref.id)
      setStep('invoice')
    } catch (err) {
      console.error('Create order error:', err)
      const message = err && err.message ? err.message : 'L∆∞u ƒë∆°n h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.'
      setSubmitError(message)
    } finally {
      setIsSubmitting(false)
    }
  }

  function reset() {
    setSelectedProduct(null)
    setQuantity(1)
    setCustomer({ name: '', phone: '', email: '', address: '' })
    setStep('products')
    setOrderId('')
    setSubmitError('')
  }

  return (
    <>
      <header className="site-header">
        <div className="nav">
          <div className="brand">{SHOP.name}</div>
          <nav className="nav-links">
            <a href="#home">Trang ch·ªß</a>
            <a href="#products">S·∫£n ph·∫©m</a>
            <a href="#features">∆Øu ƒë√£i</a>
            <a href="#contact">Li√™n h·ªá</a>
          </nav>
        </div>
        <section id="home" className="hero">
          <div className="hero-content">
            <h1>∆Øu ƒë√£i s·ªëc h√¥m nay</h1>
            <p>Gi√° t·ªët, h√†ng ch√≠nh h√£ng, giao nhanh trong 2h t·∫°i n·ªôi th√†nh.</p>
            <div className="hero-actions">
              <a href="#products" className="btn primary">Mua ngay</a>
              <a href={SHOP.zalo} target="_blank" rel="noreferrer" className="btn">T∆∞ v·∫•n qua Zalo</a>
            </div>
            <div className="badges">
              <div className="badge">üöö Freeship n·ªôi th√†nh</div>
              <div className="badge">‚Ü©Ô∏è ƒê·ªïi tr·∫£ 7 ng√†y</div>
              <div className="badge">üõ°Ô∏è B·∫£o h√†nh 12 th√°ng</div>
              <div className="badge">üí≥ COD to√†n qu·ªëc</div>
            </div>
          </div>
          <div className="hero-art" aria-hidden="true" />
        </section>
      </header>

      <main>
        <section id="products" className="section">
          <h2>S·∫£n ph·∫©m n·ªïi b·∫≠t</h2>
          <div className="category-tabs">
            {CATEGORIES.map((c) => (
              <button
                key={c}
                type="button"
                className={`tab ${category === c ? 'active' : ''}`}
                onClick={() => { setCategory(c); setPage(1) }}
                aria-pressed={category === c}
              >
                {c}
              </button>
            ))}
          </div>
          <div className="product-grid">
            {pagedProducts.map((p) => (
              <div key={p.id} className="product-card" onClick={() => openDetail(p)}>
                <div className="product-media">
                  <img src={p.image} alt={p.name} loading="lazy" />
                </div>
                <div className="product-info">
                  <div className="product-name">{p.name}</div>
                  <div className="product-meta">
                    <div className="price-stack">
                      <span className="product-price">{currencyVND(p.price)}</span>
                      {p.originalPrice && p.originalPrice > p.price && (
                        <span className="product-original">{currencyVND(p.originalPrice)}</span>
                      )}
                    </div>
                    {p.originalPrice && p.originalPrice > p.price && (
                      <span className="discount-badge">-{Math.round((1 - p.price / p.originalPrice) * 100)}%</span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="pagination">
            <button
              type="button"
              className="page-btn"
              onClick={() => setPage(p => Math.max(1, p - 1))}
              disabled={currentPage === 1}
              aria-label="Trang tr∆∞·ªõc"
            >
              Tr∆∞·ªõc
            </button>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((n) => (
              <button
                key={n}
                type="button"
                className={`page-btn ${currentPage === n ? 'active' : ''}`}
                onClick={() => setPage(n)}
                aria-current={currentPage === n ? 'page' : undefined}
              >
                {n}
              </button>
            ))}
            <button
              type="button"
              className="page-btn"
              onClick={() => setPage(p => Math.min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
              aria-label="Trang sau"
            >
              Sau
            </button>
          </div>
        </section>

        <section id="features" className="section">
          <h2>T·∫°i sao ch·ªçn {SHOP.name}?</h2>
          <div className="features-grid">
            <div className="feature">
              <div className="icon">üè∑Ô∏è</div>
              <div>
                <h3>Gi√° t·ªët m·ªói ng√†y</h3>
                <p>∆Øu ƒë√£i tr·ª±c ti·∫øp, kh√¥ng ph√≠ ·∫©n, minh b·∫°ch cho m·ªçi ƒë∆°n h√†ng.</p>
              </div>
            </div>
            <div className="feature">
              <div className="icon">‚ö°</div>
              <div>
                <h3>Giao nhanh 2h</h3>
                <p>√Åp d·ª•ng n·ªôi th√†nh. To√†n qu·ªëc t·ª´ 1-3 ng√†y l√†m vi·ªác.</p>
              </div>
            </div>
            <div className="feature">
              <div className="icon">üõ°Ô∏è</div>
              <div>
                <h3>H√†ng ch√≠nh h√£ng</h3>
                <p>ƒê·∫ßy ƒë·ªß h√≥a ƒë∆°n, tem b·∫£o h√†nh, ƒë·ªïi tr·∫£ trong 7 ng√†y.</p>
              </div>
            </div>
            <div className="feature">
              <div className="icon">ü§ù</div>
              <div>
                <h3>H·ªó tr·ª£ t·∫≠n t√¢m</h3>
                <p>Hotline/Zalo {SHOP.hotline} t·ª´ {SHOP.openHours}.</p>
              </div>
            </div>
          </div>
        </section>

        <section className="section">
          <h2>Kh√°ch h√†ng n√≥i g√¨?</h2>
          <div className="testimonials">
            <div className="testimonial">
              <p>‚Äúƒê·∫∑t h√†ng bu·ªïi s√°ng, chi·ªÅu ƒë√£ c√≥ h√†ng. ƒê√≥ng g√≥i ch·∫Øc ch·∫Øn, s·∫Ω ·ªßng h·ªô ti·∫øp.‚Äù</p>
              <span>‚Äî Minh Khoa</span>
            </div>
            <div className="testimonial">
              <p>‚ÄúGi√° h·ª£p l√Ω, t∆∞ v·∫•n r√µ r√†ng. C√≥ xu·∫•t h√≥a ƒë∆°n nhanh ch√≥ng.‚Äù</p>
              <span>‚Äî Thu H√†</span>
            </div>
            <div className="testimonial">
              <p>‚ÄúB·∫£o h√†nh ch√≠nh h√£ng, ƒë·ªôi ng≈© h·ªó tr·ª£ r·∫•t nhi·ªát t√¨nh.‚Äù</p>
              <span>‚Äî Qu·ªëc Huy</span>
            </div>
          </div>
        </section>

        <section className="section" id="faq">
          <h2>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
          <details>
            <summary>Ph√≠ v·∫≠n chuy·ªÉn t√≠nh nh∆∞ th·∫ø n√†o?</summary>
            <p>Freeship n·ªôi th√†nh cho ƒë∆°n t·ª´ 500K. T·ªânh kh√°c t·ª´ 25K t√πy khu v·ª±c.</p>
          </details>
          <details>
            <summary>Ch√≠nh s√°ch ƒë·ªïi tr·∫£?</summary>
            <p>ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu s·∫£n ph·∫©m l·ªói do nh√† s·∫£n xu·∫•t, gi·ªØ nguy√™n tem v√† h·ªôp.</p>
          </details>
          <details>
            <summary>Thanh to√°n ra sao?</summary>
            <p>Ch·∫•p nh·∫≠n COD, chuy·ªÉn kho·∫£n ng√¢n h√†ng v√† th·∫ª n·ªôi ƒë·ªãa/ qu·ªëc t·∫ø.</p>
          </details>
        </section>

        <section id="contact" className="section contact">
          <h2>Th√¥ng tin li√™n h·ªá</h2>
          <div className="contact-grid">
            <div>
              <p><strong>C·ª≠a h√†ng:</strong> {SHOP.name}</p>
              <p><strong>Hotline:</strong> <a href={`tel:${SHOP.hotline}`}>{SHOP.hotline}</a></p>
              <p><strong>Zalo:</strong> <a href={SHOP.zalo} target="_blank" rel="noreferrer">Chat ngay</a></p>
              <p><strong>Email:</strong> <a href={`mailto:${SHOP.email}`}>{SHOP.email}</a></p>
              <p><strong>ƒê·ªãa ch·ªâ:</strong> {SHOP.address}</p>
              <p><strong>Gi·ªù m·ªü c·ª≠a:</strong> {SHOP.openHours}</p>
            </div>
            <div className="contact-cta">
              <p>Li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n nhanh:</p>
              <div className="contact-actions">
                <a className="btn primary" href={`tel:${SHOP.hotline}`}>G·ªçi ngay</a>
                <a className="btn" href={SHOP.zalo} target="_blank" rel="noreferrer">Nh·∫Øn Zalo</a>
                <a className="btn" href="#products">Xem s·∫£n ph·∫©m</a>
              </div>
            </div>
          </div>
        </section>

        {step !== 'products' && (
          <div
            className="modal-overlay"
            onMouseDown={(e) => {
              if (e.target === e.currentTarget) reset()
            }}
          >
            <div className="modal" onMouseDown={(e) => e.stopPropagation()}>
              <button className="close-btn" onClick={reset}>
                √ó
              </button>

              {step === 'form' && selectedProduct && (
                <>
                  <h3>Th√¥ng tin kh√°ch h√†ng</h3>
                  <div className="summary">
                    <span>{selectedProduct.name}</span>
                    <span>{currencyVND(selectedProduct.price)}</span>
                  </div>
                  <form onSubmit={handleSubmit} className="customer-form">
                    <label>
                      H·ªç v√† t√™n
                      <input
                        required
                        value={customer.name}
                        onChange={(e) => setCustomer({ ...customer, name: e.target.value })}
                      />
                    </label>
                    <label>
                      S·ªë ƒëi·ªán tho·∫°i
                      <input
                        required
                        type="tel"
                        value={customer.phone}
                        onChange={(e) => setCustomer({ ...customer, phone: e.target.value })}
                      />
                    </label>
                    <label>
                      Email
                      <input
                        type="email"
                        value={customer.email}
                        onChange={(e) => setCustomer({ ...customer, email: e.target.value })}
                      />
                    </label>
                    <label>
                      ƒê·ªãa ch·ªâ
                      <input
                        required
                        value={customer.address}
                        onChange={(e) => setCustomer({ ...customer, address: e.target.value })}
                      />
                    </label>
                    <label>
                      S·ªë l∆∞·ª£ng
                      <input
                        required
                        type="number"
                        min="1"
                        value={quantity}
                        onChange={(e) => setQuantity(Math.max(1, Number(e.target.value) || 1))}
                      />
                    </label>

                    <div className="summary">
                      <span>T·∫°m t√≠nh</span>
                      <span>{currencyVND(subtotal)}</span>
                    </div>
                    {submitError && (
                      <div style={{ color: 'red', fontSize: 12 }}>{submitError}</div>
                    )}

                    <div className="actions">
                      <button type="button" onClick={reset} className="secondary">
                        H·ªßy
                      </button>
                      <button type="submit" disabled={isSubmitting}>{isSubmitting ? 'ƒêang l∆∞u...' : 'Xu·∫•t h√≥a ƒë∆°n'}</button>
                    </div>
                  </form>
                </>
              )}

              {step === 'detail' && selectedProduct && (
                <div className="product-detail">
                  {(() => {
                    const images = Array.isArray(selectedProduct.images) && selectedProduct.images.length > 0
                      ? selectedProduct.images
                      : [selectedProduct.image]
                    const media = (selectedProduct.video ? [{ type: 'video', src: selectedProduct.video }] : [])
                      .concat(images.map(src => ({ type: 'image', src })))
                    const active = media[Math.min(mediaIndex, media.length - 1)]
                    return (
                      <>
                        <div className="detail-media">
                          <div className="main-media">
                            {active?.type === 'video' ? (
                              <video controls playsInline src={active.src} />
                            ) : (
                              <img src={active?.src} alt={selectedProduct.name} loading="lazy" />
                            )}
                          </div>
                          <div className="thumbs">
                            {media.map((m, idx) => (
                              <button
                                key={idx}
                                type="button"
                                className={`thumb ${idx === Math.min(mediaIndex, media.length - 1) ? 'active' : ''}`}
                                onClick={() => setMediaIndex(idx)}
                                aria-pressed={idx === Math.min(mediaIndex, media.length - 1)}
                              >
                                {m.type === 'video' ? (
                                  <span className="thumb-video">‚ñ∂</span>
                                ) : (
                                  <img src={m.src} alt={`thumb-${idx}`} loading="lazy" />
                                )}
                              </button>
                            ))}
                          </div>
                        </div>
                        <div className="detail-info">
                          <h3 className="detail-title">{selectedProduct.name}</h3>
                          <div className="detail-price">{currencyVND(selectedProduct.price)}</div>
                          {selectedProduct.category && (
                            <div className="detail-cat">{selectedProduct.category}</div>
                          )}
                          <p className="detail-desc">{selectedProduct.description || 'S·∫£n ph·∫©m ch√≠nh h√£ng, b·∫£o h√†nh 12 th√°ng, ƒë·ªïi tr·∫£ trong 7 ng√†y.'}</p>
                          <div className="detail-actions">
                            <button className="btn primary" onClick={() => setStep('form')}>Mua ngay</button>
                            <button className="btn" onClick={() => setStep('products')}>ƒê√≥ng</button>
                          </div>
                        </div>
                      </>
                    )
                  })()}
                </div>
              )}

              {step === 'invoice' && selectedProduct && (
                <div className="invoice">
                  <div className="invoice-actions no-print">
                    <button className="secondary" onClick={() => setStep('form')}>
                      Quay l·∫°i
                    </button>
                    <button onClick={() => window.print()}>In h√≥a ƒë∆°n</button>
                  </div>

                  <div className="invoice-paper">
                    <h2>H√ìA ƒê∆†N B√ÅN H√ÄNG</h2>
                    <div className="invoice-row">
                      <div>
                        <div>
                          <strong>Kh√°ch h√†ng:</strong> {customer.name}
                        </div>
                        <div>
                          <strong>ƒêi·ªán tho·∫°i:</strong> {customer.phone}
                        </div>
                        <div>
                          <strong>Email:</strong> {customer.email || '-'}
                        </div>
                        <div>
                          <strong>ƒê·ªãa ch·ªâ:</strong> {customer.address}
                        </div>
                      </div>
                      <div style={{ textAlign: 'right' }}>
                        <div>
                          <strong>C·ª≠a h√†ng:</strong> {SHOP.name}
                        </div>
                        <div>
                          <strong>Ng√†y:</strong> {new Date().toLocaleDateString('vi-VN')}
                        </div>
                        <div>
                          <strong>M√£ ƒë∆°n:</strong> {orderId || Date.now()}
                        </div>
                      </div>
                    </div>

                    <table className="invoice-table">
                      <thead>
                        <tr>
                          <th>#</th>
                          <th>S·∫£n ph·∫©m</th>
                          <th>ƒê∆°n gi√°</th>
                          <th>S·ªë l∆∞·ª£ng</th>
                          <th>Th√†nh ti·ªÅn</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>1</td>
                          <td>{selectedProduct.name}</td>
                          <td>{currencyVND(selectedProduct.price)}</td>
                          <td>{quantity}</td>
                          <td>{currencyVND(subtotal)}</td>
                        </tr>
                      </tbody>
                      <tfoot>
                        <tr>
                          <td colSpan="4" style={{ textAlign: 'right' }}>
                            T·ªïng c·ªông
                          </td>
                          <td>{currencyVND(subtotal)}</td>
                        </tr>
                      </tfoot>
                    </table>
                    <p style={{ marginTop: 12, fontSize: 12 }}>
                      Thanh to√°n khi nh·∫≠n h√†ng ho·∫∑c chuy·ªÉn kho·∫£n. M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá {SHOP.hotline}.
                    </p>
                    <p className="thanks">C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </main>

      <footer className="site-footer">
        <div className="footer-links">
          <a href="#faq">Ch√≠nh s√°ch ƒë·ªïi tr·∫£</a>
          <a href="#faq">V·∫≠n chuy·ªÉn</a>
          <a href="#faq">B·∫£o h√†nh</a>
          <a href="#contact">Li√™n h·ªá</a>
        </div>
        <small>¬© {new Date().getFullYear()} {SHOP.name}. All rights reserved.</small>
      </footer>

      <a className="floating-call" href={`tel:${SHOP.hotline}`}>üìû G·ªçi {SHOP.hotline}</a>
    </>
  )
}

export default App
